*** Метод пробных делений на больших числах
*** на входе всегда нечётное число
*** комплекс L1 - большое число
*** комплекс L2 - массив d - делителей числа
*** Комплекс L3 - массив сомножителей p
*** Комплекс L4 - представление делителя из массива L2 большим числом
*** здесь j это t, а i это k
*** все сравнения BN_*(*/?) делаются без учёта мощностей комплексов(больших чисел), потому что результаты арифметических операций над ними не возвращают новую мощность результата 08.12.2015
*** s -  степень числа
tdmBN(L1/L3, L4, L9)
	@+L7(100) ***(Q1)
	@+L2(100)
	*countZeroesBN(L1/s) /'s = '>C *printf(s/) /'\n'>C
	Q1=Q7 L1=L7 L1>s=L1 *compressBN(L1/L1)
	P12 ?(s=0)11 2=L3j Dj Ys ?=12
	P11 
		 ?(Q1>1)8 L1.0=n *trial_division_method(n/L2) Oi
	P13
		 ?(i>=Q2)9 L2i=L3j Di Dj=Q3 ?=13
	P8
		 @+L5(100)
		 @+L6(1)
		 
		 *** @+L8(100)
		 *** @+L9(100)
		 /'L1 = '>C *HprintfBN(L1/) /'\n'>C
		 100=Q2 *recalcefficients(L2, 3/L2) 1=Q4=Q5=Q6 OQ3=j=k
		 3=L6.0
		 
		 *BN_less(L1, L6/b) ?(b=1)6
		 *** n;2=k ?(k=0)4 *** k?-4 одно и тоже с ?(k=0)4, но не работает
		 Oi *** возможно придётся i присваивать 1
	P1 1=L6.0 *BN_eq(L4, L6/b)
		 *** /'P1 b = '>C *printf(b/) /'\n'>C
		 ?(b=1)9
		 *** проверка может не пройти, если в комплексе лежит 1, но мощность комплекса больше 1
	P2 ?(L2i<3)10 L2i=L6.0
		 *** /'L2i = '>C *printf(L2i/) /'\n'>C
		 *** /'L6 = '>C *HprintfBN(L6/) /'\n'>C
		 *** /'Q1 = '>C *Hprintf(Q1/) /'\n'>C
		 *** /'L1 = '>C *HprintfBN(L1/) /'\n'>C
		 L1;L6=L5 *compressBN(L5/L5) L1/L6=L4 *compressBN(L4/L4) OL6
		 *** /'Q5 = '>C *printf(Q5/) /'\n'>C
		 *** /'L5 = '>C *HprintfBN(L5/) /'\n'>C
		 *** /'L5.0 = '>C *printf(L5.0/) /'\n'>C
		 *** /'Q4 = '>C *printf(Q4/) /'\n'>C
		 *** /'L4 = '>C *HprintfBN(L4/) /'\n'>C
		 *BN_neq(L5, L6/b)
		 *** /'P2 b = '>C *printf(b/) /'\n'>C
		 ?(b#0)4
		 *** ?(L5>0)4 *** не фурычит
		 *** Возможна ошибка, если мощность комплекса больше 1, но число равно 0
	P3 L2i=L3j
		 *** Q1=Q8 L1=L8
		 *** /'L2i = '>C *Hprintf(L2i/) /'\n'>C
		 *** /'L5 = '>C *HprintfBN(L5/) /'\n'>C
		 Dj L4=L1 ?=1
	P4 L2i=L6.0
		 *** /'L6 = '>C *HprintfBN(L6/) /'\n'>C
		 *BN_greq(L6, L4/b)
		 ?(b=1)5
		Di ?(i<Q2)2 Oi Q2-1=l *recalcefficients(L2, L2l/L2)
		*** *printf(L2.0/) /'\n'>C *printf(L2.1/) /'\n'>C *printf(L2.2/) /'\n'>C *printf(L2.3/) /'\n'>C
		?=1 *** возможно придётся i присваивать 1
	P5
		 Q1=Q4 L1=L4 *compressBN(L4/L4)
		 *** /'Q1 = '>C *Hprintf(Q4/) /'\n'>C
		 *** /'L1 = '>C *HprintfBN(L4/) /'\n'>C
		 ?=9
	P6 /'Число должно быть больше 2'>C
	P10 /'unsigned int числа закончились\n'>C
	P9 j=Q3=Q9 Q7=Q1 L7=L1
		 *** /'Q1 = '>C *printf(Q1/) /'\n'>C
		 *** /'Q7 = '>C *printf(Q7/) /'\n'>C
		 *** /'L1 = '>C *HprintfBN(L1/) /'\n'>C
		 *** /'L7 = '>C *HprintfBN(L7/) /'\n'>C
**